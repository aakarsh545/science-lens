import React from 'react';
import { FileDown } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import type { Message } from '@/types';

interface PDFExportProps {
  messages: Message[];
  conversationTitle?: string;
  isProUser?: boolean;
}

export const PDFExport: React.FC<PDFExportProps> = ({ 
  messages, 
  conversationTitle = 'Science Lens Conversation',
  isProUser = false 
}) => {
  const { toast } = useToast();

  const generatePDF = async () => {
    if (!isProUser) {
      toast({
        title: "Pro Feature",
        description: "PDF export is available for Pro users. Upgrade to unlock!",
        variant: "destructive",
      });
      return;
    }

    try {
      // Create a simple HTML structure for PDF generation
      const htmlContent = `
        <!DOCTYPE html>
        <html>
          <head>
            <meta charset="utf-8">
            <title>${conversationTitle}</title>
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                line-height: 1.6;
                color: #333;
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
              }
              .header {
                text-align: center;
                border-bottom: 2px solid #e2e8f0;
                padding-bottom: 20px;
                margin-bottom: 30px;
              }
              .logo {
                font-size: 28px;
                font-weight: bold;
                background: linear-gradient(135deg, #3b82f6, #8b5cf6);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                margin-bottom: 10px;
              }
              .message {
                margin-bottom: 25px;
                padding: 15px;
                border-radius: 8px;
              }
              .user-message {
                background-color: #f1f5f9;
                border-left: 4px solid #3b82f6;
              }
              .assistant-message {
                background-color: #fafafa;
                border-left: 4px solid #8b5cf6;
              }
              .message-role {
                font-weight: bold;
                font-size: 14px;
                text-transform: uppercase;
                letter-spacing: 0.5px;
                margin-bottom: 8px;
              }
              .user-role {
                color: #3b82f6;
              }
              .assistant-role {
                color: #8b5cf6;
              }
              .message-content {
                white-space: pre-wrap;
                word-wrap: break-word;
              }
              .timestamp {
                font-size: 12px;
                color: #64748b;
                margin-top: 8px;
              }
              .footer {
                margin-top: 40px;
                padding-top: 20px;
                border-top: 1px solid #e2e8f0;
                text-align: center;
                font-size: 12px;
                color: #64748b;
              }
            </style>
          </head>
          <body>
            <div class="header">
              <div class="logo">Science Lens</div>
              <h1>${conversationTitle}</h1>
              <p>Generated on ${new Date().toLocaleDateString()}</p>
            </div>
            
            <div class="content">
              ${messages.map(message => `
                <div class="message ${message.type === 'user' ? 'user-message' : 'assistant-message'}">
                  <div class="message-role ${message.type === 'user' ? 'user-role' : 'assistant-role'}">
                    ${message.type === 'user' ? 'Question' : 'Science Lens Answer'}
                  </div>
                  <div class="message-content">${message.content}</div>
                  <div class="timestamp">
                    ${new Date(message.timestamp).toLocaleString()}
                  </div>
                </div>
              `).join('')}
            </div>
            
            <div class="footer">
              <p>Generated by Science Lens - Your AI Science Companion</p>
              <p>Visit us at science-lens.lovable.app</p>
            </div>
          </body>
        </html>
      `;

      // Create a blob with the HTML content
      const blob = new Blob([htmlContent], { type: 'text/html' });
      const url = URL.createObjectURL(blob);

      // Create a temporary link to download the file
      const link = document.createElement('a');
      link.href = url;
      link.download = `${conversationTitle.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.html`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      // Clean up the URL
      URL.revokeObjectURL(url);

      // Show success message
      toast({
        title: "PDF Export Complete! ðŸ“„",
        description: "Your conversation has been exported as an HTML file. You can print it as PDF from your browser.",
      });

      // Provide instructions for PDF conversion
      setTimeout(() => {
        toast({
          title: "Convert to PDF",
          description: "Open the downloaded file in your browser and use Ctrl+P (Cmd+P) to print as PDF.",
        });
      }, 2000);

    } catch (error) {
      console.error('PDF export error:', error);
      toast({
        title: "Export Error",
        description: "Failed to export conversation. Please try again.",
        variant: "destructive",
      });
    }
  };

  if (messages.length === 0) {
    return null;
  }

  return (
    <Button
      variant="outline"
      size="sm"
      onClick={generatePDF}
      className={`flex items-center space-x-2 ${!isProUser ? 'opacity-50' : ''}`}
      disabled={!isProUser}
    >
      <FileDown className="h-4 w-4" />
      <span>{isProUser ? 'Export PDF' : 'Export PDF (Pro)'}</span>
    </Button>
  );
};